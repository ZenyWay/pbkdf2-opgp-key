(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var getPbkdf2OpgpKeyFactory=require("../src").default,mock,getPbkdf2,opgpkey,digest,creds;beforeEach(function(){opgpkey={handle:"key-handle"},digest={value:"digest",spec:{}};var e=jasmine.createSpy("pbkdf2").and.returnValue(Promise.resolve(digest)),t=jasmine.createSpy("getkdf").and.returnValue(e),n=jasmine.createSpy("generateKey").and.returnValue(Promise.resolve(opgpkey)),o=jasmine.createSpy("getKeysFromArmor"),r=jasmine.createSpy("getArmorFromKey"),c=jasmine.createSpy("unlock");mock={getkdf:t,pbkdf2:e,opgp:{generateKey:n,getKeysFromArmor:o,getArmorFromKey:r,unlock:c}},creds={user:"j.doe@test.org",passphrase:"secret passphrase"}}),describe("getPbkdf2OpgpKeyFactory (opgp: OpgpService, config?: Partial<Pbdkf2OpgpKeyConfig>): Pbdkf2OpgpKeyFactory",function(){it("returns a function",function(){expect(getPbkdf2OpgpKeyFactory(mock.opgp)).toEqual(jasmine.any(Function))}),describe("when called with an OpgpService instance",function(){beforeEach(function(e){var t=getPbkdf2OpgpKeyFactory(mock.opgp,{getkdf:mock.getkdf});t(creds).then(function(e){return e.unlock(creds.passphrase)}).then(function(){return setTimeout(e)}).catch(function(t){return setTimeout(function(){return e.fail(t)})})}),it("configures the returned function with that instance and default settings",function(){expect(mock.opgp.generateKey).toHaveBeenCalled(),expect(mock.opgp.unlock).toHaveBeenCalled(),expect(mock.getkdf).toHaveBeenCalledWith({}),expect(mock.opgp.generateKey).toHaveBeenCalledWith(creds.user,jasmine.objectContaining({passphrase:digest.value,size:2048,unlocked:!0}))})}),describe("when called with an OpgpService instance and a Pbdkf2OpgpKeyConfig instance { size?: number, locked?: boolean, pbkdf2?: Partial<Pbkdf2Sha512Config> }",function(){var e;beforeEach(function(t){e={size:4096,locked:!0,pbkdf2:{},getkdf:mock.getkdf};var n=getPbkdf2OpgpKeyFactory(mock.opgp,e);n(creds).then(function(){return setTimeout(t)}).catch(function(e){return setTimeout(function(){return t.fail(e)})})}),it("configures the returned function accordingly",function(){expect(mock.getkdf).toHaveBeenCalledWith(e.pbkdf2),expect(mock.opgp.generateKey).toHaveBeenCalledWith(creds.user,jasmine.objectContaining({passphrase:digest.value,size:e.size,unlocked:!e.locked}))})}),describe("when called with anything else than a valid OpgpService instance",function(){var e,t;beforeEach(function(){e=[null,void 0,!0,42,"foo",function(){return"foo"},["foo"],{foo:"bar"}],t=function(e){return function(){return getPbkdf2OpgpKeyFactory(e,{getkdf:mock.getkdf})}}}),it('throws an "invalid argument" TypeError',function(){e.every(function(e){return expect(t(e)).toThrowError(TypeError,"invalid argument")}),expect(mock.opgp.generateKey).not.toHaveBeenCalled(),expect(mock.opgp.unlock).not.toHaveBeenCalled(),expect(mock.getkdf).not.toHaveBeenCalled(),expect(mock.opgp.generateKey).not.toHaveBeenCalled()})})}),describe("getPbkdf2OpgpKey (creds: Credentials): Promise<Pbkdf2OpgpKey>",function(){var e;beforeEach(function(){e=getPbkdf2OpgpKeyFactory(mock.opgp,{getkdf:mock.getkdf})}),describe("when called with a Credentials object: { user: string, passphrase: string }",function(){var t;beforeEach(function(n){e(creds).then(function(e){return t=e}).then(function(){return setTimeout(n)}).catch(function(e){return setTimeout(function(){return n.fail(e)})})}),it("returns a Pbkdf2OpgpKey object:  { key: OpgpProxyKey, pbkdf2: Pbkdf2Sha512Config, unlock: (passphrase: string) => Promise<Pbkdf2OpgpKey>",function(){expect(mock.opgp.getArmorFromKey).toHaveBeenCalledWith(opgpkey),expect(t).toEqual({key:opgpkey,pbkdf2:digest.spec,unlock:jasmine.any(Function),toArmor:jasmine.any(Function),clone:jasmine.any(Function)})})}),describe("when called with anything else",function(){var t,n;beforeEach(function(o){t=[null,void 0,!0,42,"foo",function(){return"foo"},["foo"],{user:42,passphrase:"passphrase"},{user:"j.doe@test.org",passphrase:42}],Promise.all(t.map(function(t){return e(t).catch(function(e){return e})})).then(function(e){return n=e}).then(function(){return setTimeout(o)}).catch(function(e){return setTimeout(function(){return o.fail(e)})})}),it('rejects with an "invalid credentials" TypeError',function(){expect(mock.opgp.getArmorFromKey).not.toHaveBeenCalled(),expect(n.length).toBe(t.length),n.every(function(e){return expect(e).toEqual(jasmine.any(TypeError))&&expect(e.message).toBe("invalid credentials")})})})}),describe("getPbkdf2OpgpKey (armor: { armor: string, pbkdf2: Pbkdf2sha512DigestSpec }, passphrase: string): Promise<Pbkdf2OpgpKey>",function(){var e;beforeEach(function(){e=getPbkdf2OpgpKeyFactory(mock.opgp,{getkdf:mock.getkdf})}),describe("when called with the specified arguments",function(){var t,n;beforeEach(function(o){mock.opgp.getKeysFromArmor.and.returnValue(Promise.resolve(opgpkey)),mock.opgp.unlock.and.returnValue(Promise.resolve(opgpkey)),n={armor:"armor",pbkdf2:{salt:"salt"}},e(n,creds.passphrase).then(function(e){return t=e}).then(function(){return setTimeout(o)}).catch(function(e){return setTimeout(function(){return o.fail(e)})})}),it("returns a Pbkdf2OpgpKey object encapsulating the extracted key: { key: OpgpProxyKey, pbkdf2: Pbkdf2Sha512Config, unlock: (passphrase: string) => Promise<Pbkdf2OpgpKey>",function(){expect(t).toEqual({key:opgpkey,pbkdf2:digest.spec,unlock:jasmine.any(Function),toArmor:jasmine.any(Function),clone:jasmine.any(Function)}),expect(mock.opgp.getKeysFromArmor).toHaveBeenCalledWith("armor"),expect(mock.pbkdf2).toHaveBeenCalledWith(creds.passphrase),expect(mock.opgp.unlock).toHaveBeenCalledWith(opgpkey,digest.value)})}),describe("when called with an armored string representation of multiple private keys",function(){var t;beforeEach(function(n){mock.opgp.getKeysFromArmor.and.returnValue(Promise.resolve([opgpkey,opgpkey])),e({armor:"armor",pbkdf2:{salt:"salt"}},creds.passphrase).then(function(e){return setTimeout(function(){return n.fail(new Error(e))})}).catch(function(e){return t=e}).then(function(){return setTimeout(n)})}),it('rejects with an "unsupported multiple key armor" Error',function(){expect(t).toEqual(jasmine.any(Error)),expect(t.message).toBe("unsupported multiple key armor"),expect(mock.opgp.getKeysFromArmor).toHaveBeenCalledWith("armor")})}),describe("when called with an incorrect passphrase string",function(){var t;beforeEach(function(n){mock.opgp.getKeysFromArmor.and.returnValue(Promise.resolve(opgpkey)),mock.opgp.unlock.and.returnValue(Promise.reject(new TypeError("boom"))),e({armor:"armor",pbkdf2:{salt:"salt"}},creds.passphrase).then(function(e){return setTimeout(function(){return n.fail(new Error(e))})}).catch(function(e){return t=e}).then(function(){return setTimeout(n)})}),it("rejects with the error thrown by the underlying OpgpService#unlock method",function(){expect(t).toEqual(jasmine.any(Error)),expect(t.message).toBe("boom"),expect(mock.opgp.getKeysFromArmor).toHaveBeenCalledWith("armor"),expect(mock.pbkdf2).toHaveBeenCalledWith(creds.passphrase),expect(mock.opgp.unlock).toHaveBeenCalledWith(opgpkey,digest.value)})}),describe("when called with anything else",function(){var t,n;beforeEach(function(o){t=[null,void 0,!0,42,function(){return"foo"},["foo"],{foo:"bar"}];var r=t.map(function(t){return e(t,"armor")}).concat(t.map(function(t){return e("passphrase",t)}));Promise.all(r.map(function(e){return e.catch(function(e){return e})})).then(function(e){return n=e}).then(function(){return setTimeout(o)}).catch(function(e){return setTimeout(function(){return o.fail(e)})})}),it('rejects with an "invalid argument" TypeError',function(){expect(n.length).toBe(2*t.length),n.every(function(e){return expect(e).toEqual(jasmine.any(TypeError))&&expect(e.message).toBe("invalid argument")})})})}),describe("Pbkdf2OpgpKey",function(){var e;beforeEach(function(t){mock.opgp.getArmorFromKey.and.returnValue(Promise.resolve("armor"));var n=getPbkdf2OpgpKeyFactory(mock.opgp,{getkdf:mock.getkdf});n(creds).then(function(t){return e=t}).then(function(){return setTimeout(t)}).catch(function(e){return setTimeout(function(){return t.fail(e)})})}),describe("unlock (passphrase: string): Promise<Pbkdf2OpgpKey>",function(){describe("when called with the correct passphrase string",function(){var t;beforeEach(function(n){mock.opgp.unlock.and.returnValue(Promise.resolve(opgpkey)),e.unlock(creds.passphrase).then(function(e){return t=e}).then(function(){return setTimeout(n)}).catch(function(e){return setTimeout(function(){return n.fail(e)})})}),it("returns an unlocked instance of the key",function(){expect(mock.opgp.unlock).toHaveBeenCalledWith(opgpkey,digest.value),expect(t).toEqual({key:opgpkey,pbkdf2:digest.spec,unlock:jasmine.any(Function),toArmor:jasmine.any(Function),clone:jasmine.any(Function)})})}),describe("when called with any other string than the correct passphrase",function(){var t;beforeEach(function(n){mock.opgp.unlock.and.returnValue(Promise.reject(new TypeError("boom"))),e.unlock(creds.passphrase).catch(function(e){return t=e}).then(function(){return setTimeout(n)}).catch(function(e){return setTimeout(function(){return n.fail(e)})})}),it("rejects with the error thrown by the underlying OpgpService#unlock method",function(){expect(t).toEqual(jasmine.any(TypeError)),expect(t.message).toBe("boom")})}),describe("when called with anything else than a string",function(){var t,n;beforeEach(function(o){t=[null,void 0,!0,42,function(){return"foo"},["foo"],{foo:"bar"}],Promise.all(t.map(function(t){return e.unlock(t).catch(function(e){return e})})).then(function(e){return n=e}).then(function(){return setTimeout(o)}).catch(function(e){return setTimeout(function(){return o.fail(e)})})}),it('rejects with an "invalid argument" TypeError',function(){expect(n.length).toBe(t.length),expect(mock.opgp.unlock).not.toHaveBeenCalled(),n.every(function(e){return expect(e).toEqual(jasmine.any(TypeError))&&expect(e.message).toBe("invalid argument")})})})}),describe("toArmor (): Promise<string>",function(){var t;beforeEach(function(n){mock.opgp.getArmorFromKey.calls.reset(),e.toArmor().then(function(e){return t=e}).then(function(){return setTimeout(n)}).catch(function(e){return setTimeout(function(){return n.fail(e)})})}),it("returns the armored string representation of the key",function(){expect(mock.opgp.getArmorFromKey).not.toHaveBeenCalled(),expect(t).toEqual({armor:"armor",pbkdf2:digest.spec})})}),describe("clone (): Promise<string>",function(){var t;beforeEach(function(n){mock.opgp.getArmorFromKey.calls.reset(),mock.opgp.getKeysFromArmor.and.returnValue(Promise.resolve(opgpkey)),e.clone().then(function(e){return t=e}).then(function(){return setTimeout(n)}).catch(function(e){return setTimeout(function(){return n.fail(e)})})}),it("returns a locked clone of the key",function(){expect(mock.opgp.getArmorFromKey).not.toHaveBeenCalled(),expect(mock.opgp.getKeysFromArmor).toHaveBeenCalledWith("armor"),expect(mock.opgp.unlock).not.toHaveBeenCalled(),expect(t).toEqual({key:opgpkey,pbkdf2:digest.spec,unlock:jasmine.any(Function),toArmor:jasmine.any(Function),clone:jasmine.any(Function)})})})});
},{"../src":2}],2:[function(require,module,exports){
"use strict";function getPbkdf2OpgpKey(e,r,t,n){return utils_1.isString(t)?getPbkdf2OpgpKey(e,r,{user:t,passphrase:n}):isValidCredentials(t)?Pbkdf2OpgpKeyClass.newInstance(e,r,t.user,t.passphrase):isValidKeyArmor(t)&&utils_1.isString(n)?Pbkdf2OpgpKeyClass.fromPbkdf2KeyArmor(e,r,t,n):Promise.reject(new TypeError("invalid arguments"))}function wrapInstance(e){return e.then(function(e){return{key:e.key,pbkdf2:e.pbkdf2,unlock:function(r){return wrapInstance(e.unlock(r))},toArmor:function(){return e.toArmor()},clone:function(){return wrapInstance(e.clone())}}})}function getPbkdf2Spec(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=tslib_1.__assign.apply(void 0,[{}].concat(e));return"none"===t.encoding&&delete t.encoding,t}function isValidOpgpService(e){return!!e&&OPGP_SERVICE_METHODS.every(function(r){return utils_1.isFunction(e[r])})}function isValidCredentials(e){return!!e&&utils_1.isString(e.user)&&utils_1.isString(e.passphrase)}function isValidKeyArmor(e){return!!e&&utils_1.isString(e.armor)&&!!e.pbkdf2&&utils_1.isString(e.pbkdf2.salt)}Object.defineProperty(exports,"__esModule",{value:!0});var utils_1=require("./utils"),tslib_1=require("tslib"),KEY_SIZE_DEFAULT=2048,getPbkdf2OpgpKeyFactory=function(e,r){function t(r,t){var i=Promise.all([r,t]).then(function(r){var t=r[0],i=r[1];return getPbkdf2OpgpKey(e,n,t,i)});return wrapInstance(i)}if(!isValidOpgpService(e))throw new TypeError("invalid argument");var n=tslib_1.__assign({},{size:KEY_SIZE_DEFAULT},r);return n.pbkdf2=tslib_1.__assign({},n.pbkdf2),n.getkdf=utils_1.isFunction(n.getkdf)?n.getkdf:require("pbkdf2sha512").default,t},Pbkdf2OpgpKeyClass=function(){function e(e,r,t,n,i){this.getPbkdf2=e,this.opgp=r,this.armor=t,this.key=n,this.pbkdf2=i}return e.newInstance=function(r,t,n,i){var o=t.getkdf(getPbkdf2Spec(t.pbkdf2));return o(i).then(function(i){return r.generateKey(n,{passphrase:i.value,size:t.size,unlocked:!t.locked}).then(function(n){return e.fromOpgpProxyKey(t.getkdf,r,n,i.spec)})})},e.fromPbkdf2KeyArmor=function(r,t,n,i){var o=t.getkdf(getPbkdf2Spec(t.pbkdf2,n.pbkdf2)),s=r.getKeysFromArmor(n.armor).then(function(e){return Array.isArray(e)?Promise.reject(new Error("unsupported multiple key armor")):e});return Promise.all([s,o(i)]).then(function(i){var o=i[0],s=i[1];return r.unlock(o,s.value).then(function(i){return new e(t.getkdf,r,n.armor,i,s.spec)})})},e.prototype.unlock=function(e){var r=this;if(!utils_1.isString(e))return Promise.reject(new TypeError("invalid argument"));var t=this.getPbkdf2(this.pbkdf2);return t(e).then(function(e){return Promise.resolve(r.opgp.unlock(r.key,e.value))}).then(function(e){return r._getInstance(e)})},e.prototype.toArmor=function(){return Promise.resolve({armor:this.armor,pbkdf2:tslib_1.__assign({},this.pbkdf2)})},e.prototype.clone=function(){var e=this;return Promise.resolve(this.opgp.getKeysFromArmor(this.armor)).then(function(r){return e._getInstance(r)})},e.fromOpgpProxyKey=function(r,t,n,i){return Promise.resolve(t.getArmorFromKey(n)).then(function(o){return new e(r,t,o,n,i)})},e.prototype._getInstance=function(r){return new e(this.getPbkdf2,this.opgp,this.armor,r,this.pbkdf2)},e}(),OPGP_SERVICE_METHODS=["generateKey","getKeysFromArmor","getArmorFromKey","unlock"];exports.default=getPbkdf2OpgpKeyFactory;
},{"./utils":3,"pbkdf2sha512":undefined,"tslib":undefined}],3:[function(require,module,exports){
"use strict";function isString(t){return"string"==typeof(t&&t.valueOf())}function isNumber(t){return"number"==typeof(t&&t.valueOf())}function isFunction(t){return"function"==typeof t}Object.defineProperty(exports,"__esModule",{value:!0}),exports.isString=isString,exports.isNumber=isNumber,exports.isFunction=isFunction;
},{}]},{},[1]);
